import*as CFI from"../epubcfi.js";const parser=new DOMParser,XML=e=>parser.parseFromString(e,"application/xml"),XHTML=e=>parser.parseFromString(e,"application/xhtml+xml");{const e=XML('<?xml version="1.0"?>\n\n<package version="2.0" \n         unique-identifier="bookid" \n         xmlns="http://www.idpf.org/2007/opf"\n         xmlns:dc="http://purl.org/dc/elements/1.1/" \n         xmlns:opf="http://www.idpf.org/2007/opf">\n    \n    <metadata>\n    \t<dc:title>…</dc:title>\n    \t<dc:identifier id="bookid">…</dc:identifier>\n    \t<dc:creator>…</dc:creator>\n        <dc:language>en</dc:language>\n    </metadata>\n    \n    <manifest>\n        <item id="toc"\n              properties="nav"\n              href="toc.xhtml" \n              media-type="application/xhtml+xml"/>\n        <item id="titlepage" \n              href="titlepage.xhtml" \n              media-type="application/xhtml+xml"/>\n        <item id="chapter01" \n              href="chapter01.xhtml" \n              media-type="application/xhtml+xml"/>\n        <item id="chapter02" \n              href="chapter02.xhtml" \n              media-type="application/xhtml+xml"/>\n        <item id="chapter03" \n              href="chapter03.xhtml" \n              media-type="application/xhtml+xml"/>\n        <item id="chapter04" \n              href="chapter04.xhtml" \n              media-type="application/xhtml+xml"/>\n    </manifest>\n    \n    <spine>\n        <itemref id="titleref"  idref="titlepage"/>\n        <itemref id="chap01ref" idref="chapter01"/>\n        <itemref id="chap02ref" idref="chapter02"/>\n        <itemref id="chap03ref" idref="chapter03"/>\n        <itemref id="chap04ref" idref="chapter04"/>\n    </spine>\n    \n</package>'),t=XHTML('<html xmlns="http://www.w3.org/1999/xhtml">\n    <head>\n    \t<title>…</title>\n    </head>\n    \n    <body id="body01">\n    \t<p>…</p>\n    \t<p>…</p>\n    \t<p>…</p>\n    \t<p>…</p>\n        <p id="para05">xxx<em>yyy</em>0123456789</p>\n    \t<p>…</p>\n    \t<p>…</p>\n    \t<img id="svgimg" src="foo.svg" alt="…"/>\n    \t<p>…</p>\n    \t<p>…</p>\n    </body>\n</html>'),n=XHTML('<html xmlns="http://www.w3.org/1999/xhtml">\n    <head>\n    \t<title>…</title>\n    </head>\n    <body id="body01">\n    \t<p>…</p><p>…</p><p>…</p><p>…</p>\n        <p id="para05">xxx<em>yyy</em><![CDATA[0123]]>45<![CDATA[67]]>&#56;&#57;</p>\n    \t<p>…</p>\n    \t<p>…</p>\n    \t<img id="svgimg" src="foo.svg" alt="…"/>\n    \t<p>…</p>\n    \t<p>…</p>\n    </body>\n</html>'),p=e.getElementById("chap01ref"),a=CFI.toElement(e,CFI.parse("/6/4[chap01ref]")[0]),r=CFI.toElement(e,CFI.parse("/6/4")[0]);console.assert(p===a),console.assert(p===r);const i=e=>{for(const t of["/4[body01]/10[para05]/3:10","/4[body01]/16[svgimg]","/4[body01]/10[para05]/1:0","/4[body01]/10[para05]/2/1:0","/4[body01]/10[para05]/2/1:3"]){const n=CFI.toRange(e,CFI.parse(t)),p=CFI.fromRange(n),a=`epubcfi(${t})`;console.assert(p===a,`expected ${a}, got ${p}`)}for(let t=0;t<10;t++){const n=`/4/10,/3:${t},/3:${t+1}`,p=CFI.toRange(e,CFI.parse(n)),a=`${t}`;console.assert(p.toString()===a,`expected ${a}, got ${p}`)}};i(t),i(n)}{const e=XML('<?xml version="1.0"?>\n<package version="2.0" \n         unique-identifier="bookid" \n         xmlns="http://www.idpf.org/2007/opf"\n         xmlns:dc="http://purl.org/dc/elements/1.1/" \n         xmlns:opf="http://www.idpf.org/2007/opf">\n    <metadata></metadata>\n    <manifest></manifest>\n    <spine>\n        <itemref id="titleref"  idref="titlepage"/>\n        <itemref id="chap0]!/1ref^" idref="chapter01"/>\n        <itemref id="chap02ref" idref="chapter02"/>\n        <itemref id="chap03ref" idref="chapter03"/>\n        <itemref id="chap04ref" idref="chapter04"/>\n    </spine>\n</package>'),t=e.getElementById("chap0]!/1ref^"),n=CFI.toElement(e,CFI.parse("/6/4[chap0^]!/1ref^^]")[0]);console.assert(t===n);const p=XHTML('<html xmlns="http://www.w3.org/1999/xhtml">\n    <head>\n    \t<title>…</title>\n    </head>\n    <body id="body0]!/1^">\n    \t<p>…</p>\n    \t<p>…</p>\n    \t<p>…</p>\n    \t<p>…</p>\n        <p id="para]/0,/5">xxx<em>yyy</em>0123456789</p>\n    \t<p>…</p>\n    \t<p>…</p>\n    \t<img id="s][vgimg" src="foo.svg" alt="…"/>\n    \t<p>…</p>\n    \t<p>…</p>\n    </body>\n</html>');for(const e of["/4[body0^]!/1^^]/10[para^]/0^,/5]/3:10","/4[body0^]!/1^^]/16[s^]^[vgimg]","/4[body0^]!/1^^]/10[para^]/0^,/5]/1:0","/4[body0^]!/1^^]/10[para^]/0^,/5]/2/1:0","/4[body0^]!/1^^]/10[para^]/0^,/5]/2/1:3"]){const t=CFI.toRange(p,CFI.parse(e)),n=CFI.fromRange(t),a=`epubcfi(${e})`;console.assert(n===a,`expected ${a}, got ${n}`)}for(let e=0;e<10;e++){const t=`/4[body0^]!/1^^]/10[para^]/0^,^/5],/3:${e},/3:${e+1}`,n=CFI.toRange(p,CFI.parse(t)),a=`${e}`;console.assert(n.toString()===a,`expected ${a}, got ${n}`)}}for(const[e,t,n]of[["/6/4!/10","/6/4!/10",0],["/6/4!/2/3:0","/6/4!/2",1],["/6/4!/2/4/6/8/10/3:0","/6/4!/4",-1],["/6/4[chap0^]!/1ref^^]!/4[body01^^]/10[para^]^,05^^]","/6/4!/4/10",0],["/6/4[chap0^]!/1ref^^]!/4[body01^^],/10[para^]^,05^^],/15:10[foo^]]","/6/4!/4/12",-1]]){const p=CFI.compare(e,t);console.assert(p===n,`compare ${e} and ${t}, expected ${n}, got ${p}`)}